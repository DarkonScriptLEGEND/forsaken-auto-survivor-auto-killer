local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local clones = {}
local cloneCount = 3 -- Start with 3 clones; you can change this

local jumpConnection

-- Function to create a clone of the player character
local function createClone()
    if not player.Character then return nil end
    local clone = player.Character:Clone()
    clone.Name = player.Name .. "_Clone_" .. #clones + 1
    clone.Parent = workspace

    -- Remove scripts to avoid conflicts
    for _, child in ipairs(clone:GetDescendants()) do
        if child:IsA("Script") or child:IsA("LocalScript") then
            child:Destroy()
        elseif child:IsA("BasePart") then
            child.Anchored = false
            child.CanCollide = false
        end
    end

    -- Set HumanoidRootPart properties
    local hrp = clone:FindFirstChild("HumanoidRootPart")
    if hrp then
        hrp.Anchored = false
    end

    return clone
end

-- Function to update clones' positions around the player
local function updateClones()
    local basePos = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
    if not basePos then return end

    for i, clone in ipairs(clones) do
        local hrp = clone:FindFirstChild("HumanoidRootPart")
        if hrp then
            local offset = Vector3.new(4 * i, 0, 0) -- Space clones 4 studs apart on X axis
            local targetPos = basePos + offset

            -- Smoothly move clone towards targetPos
            hrp.CFrame = CFrame.new(targetPos, targetPos + player.Character.HumanoidRootPart.CFrame.LookVector)
        end
    end
end

-- Function to make clones jump when player jumps
local function onJump()
    for _, clone in ipairs(clones) do
        local cloneHumanoid = clone:FindFirstChild("Humanoid")
        if cloneHumanoid and cloneHumanoid:GetState() ~= Enum.HumanoidStateType.Jumping and cloneHumanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
            cloneHumanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

-- Create initial clones
for i = 1, cloneCount do
    local newClone = createClone()
    if newClone then
        table.insert(clones, newClone)
    end
end

-- Connect jump event
if humanoid then
    jumpConnection = humanoid.Jumping:Connect(onJump)
end

-- Update clones every frame
RunService.Heartbeat:Connect(updateClones)

-- Functions to add or remove clones
local function addClone()
    local newClone = createClone()
    if newClone then
        table.insert(clones, newClone)
    end
end

local function removeClone()
    local clone = table.remove(clones)
    if clone then
        clone:Destroy()
    end
end

-- Example usage:
-- To add a clone, call addClone()
-- To remove a clone, call removeClone()

-- For testing: Add commands via chat
player.Chatted:Connect(function(msg)
    if msg == "!addclone" then
        addClone()
    elseif msg == "!removeclone" then
        removeClone()
    end
end)
