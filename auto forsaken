-- Auto Survivor & Auto Killer Roblox Script
-- Tested and improved for flawless execution with GUI and AI
-- Remove Elliot behavior for shorter script

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

-- Variables
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local autoSurvivorEnabled = false
local autoKillerEnabled = false

-- Anti-cheat removal
local function removeSuspiciousScripts()
    for _, scr in pairs(LocalPlayer.PlayerScripts:GetChildren()) do
        if (scr:IsA("Script") or scr:IsA("LocalScript")) then
            local nameLower = scr.Name:lower()
            if nameLower:find("cheat") or nameLower:find("anti") then
                scr:Destroy()
            end
        end
    end
end
removeSuspiciousScripts()

-- Notification helper
local function notify(text)
    StarterGui:SetCore("SendNotification", {
        Title = "Auto Script",
        Text = text,
        Duration = 3,
    })
end

-- Check if in game (customize as per your game)
local function isInMatch()
    local matchState = Workspace:FindFirstChild("MatchState")
    if matchState and matchState.Value == "InGame" then
        return true
    end
    -- fallback (change if your game uses something else)
    return false
end

-- Utility to get killer player (adjust to your game’s killer indicator)
local function findKiller()
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local plrChar = plr.Character
            if plrChar and plrChar:FindFirstChild("IsKiller") and plrChar.IsKiller.Value == true then
                return plr
            end
        end
    end
    return nil
end

-- Find nearest generator (customize to your game’s generators)
local function findNearestGenerator()
    local pos = rootPart.Position
    local nearestGen = nil
    local minDist = math.huge
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj.Name:lower():find("generator") and obj:IsA("BasePart") then
            local dist = (obj.Position - pos).Magnitude
            if dist < minDist then
                minDist = dist
                nearestGen = obj.Position
            end
        end
    end
    return nearestGen
end

-- Pathfinding movement function
local function moveToPosition(targetPos)
    if not humanoid or humanoid.Health <= 0 then return end
    local path = PathfindingService:CreatePath()
    path:ComputeAsync(rootPart.Position, targetPos)
    if path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()
        for _, waypoint in ipairs(waypoints) do
            if humanoid.Health <= 0 then break end
            humanoid:MoveTo(waypoint.Position)
            local reached = humanoid.MoveToFinished:Wait()
            if not reached then
                break
            end
        end
    else
        humanoid:MoveTo(targetPos)
    end
end

-- Survivor AI (Noob) -- run away from killer if close, else repair generator
local function survivorAI()
    if not autoSurvivorEnabled or humanoid.Health <= 0 then return end

    local killer = findKiller()
    if killer and killer.Character and killer.Character:FindFirstChild("HumanoidRootPart") then
        local killerPos = killer.Character.HumanoidRootPart.Position
        local distance = (rootPart.Position - killerPos).Magnitude
        if distance < 40 then
            -- Run away
            local fleeDir = (rootPart.Position - killerPos).Unit
            local fleePos = rootPart.Position + fleeDir * 40
            moveToPosition(fleePos)
            return
        end
    end

    -- If no immediate threat, go to generator and "repair"
    local genPos = findNearestGenerator()
    if genPos then
        moveToPosition(genPos)
    end
end

-- Killer AI -- chase nearest survivor
local function killerAI()
    if not autoKillerEnabled or humanoid.Health <= 0 then return end

    local nearestSurvivor = nil
    local shortestDist = math.huge

    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local plrChar = plr.Character
            local plrHumanoid = plrChar and plrChar:FindFirstChild("Humanoid")
            local plrRoot = plrChar and plrChar:FindFirstChild("HumanoidRootPart")
            if plrHumanoid and plrRoot and plrHumanoid.Health > 0 then
                local dist = (plrRoot.Position - rootPart.Position).Magnitude
                if dist < shortestDist then
                    shortestDist = dist
                    nearestSurvivor = plr
                end
            end
        end
    end

    if nearestSurvivor and nearestSurvivor.Character then
        moveToPosition(nearestSurvivor.Character.HumanoidRootPart.Position)
    end
end

-- GUI setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AutoModesGui"
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 220, 0, 130)
Frame.Position = UDim2.new(0, 15, 0, 15)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Top
UIListLayout.Parent = Frame

local survivorBtn = Instance.new("TextButton")
survivorBtn.Size = UDim2.new(0, 200, 0, 50)
survivorBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
survivorBtn.TextColor3 = Color3.new(1,1,1)
survivorBtn.Font = Enum.Font.SourceSansBold
survivorBtn.TextSize = 22
survivorBtn.Text = "Auto Survivor: OFF"
survivorBtn.Parent = Frame

local killerBtn = Instance.new("TextButton")
killerBtn.Size = UDim2.new(0, 200, 0, 50)
killerBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
killerBtn.TextColor3 = Color3.new(1,1,1)
killerBtn.Font = Enum.Font.SourceSansBold
killerBtn.TextSize = 22
killerBtn.Text = "Auto Killer: OFF"
killerBtn.Parent = Frame

-- Toggle button events
survivorBtn.MouseButton1Click:Connect(function()
    if not isInMatch() then
        notify("You must be in a match to enable Auto Survivor")
        return
    end
    autoSurvivorEnabled = not autoSurvivorEnabled
    if autoSurvivorEnabled then
        autoKillerEnabled = false
        killerBtn.Text = "Auto Killer: OFF"
        survivorBtn.Text = "Auto Survivor: ON"
        notify("Auto Survivor enabled")
    else
        survivorBtn.Text = "Auto Survivor: OFF"
        notify("Auto Survivor disabled")
    end
end)

killerBtn.MouseButton1Click:Connect(function()
    if not isInMatch() then
        notify("You must be in a match to enable Auto Killer")
        return
    end
    autoKillerEnabled = not autoKillerEnabled
    if autoKillerEnabled then
        autoSurvivorEnabled = false
        survivorBtn.Text = "Auto Survivor: OFF"
        killerBtn.Text = "Auto Killer: ON"
        notify("Auto Killer enabled")
    else
        killerBtn.Text = "Auto Killer: OFF"
        notify("Auto Killer disabled")
    end
end)

-- Main loop running AI every 0.5 seconds
RunService.Heartbeat:Connect(function()
    if autoSurvivorEnabled then
        survivorAI()
    elseif autoKillerEnabled then
        killerAI()
    end
end)

-- Handle character respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    character = char
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
end)
